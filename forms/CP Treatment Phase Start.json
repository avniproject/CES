{
  "name" : "CP Treatment Phase Start",
  "uuid" : "e5e312e4-2bb5-4e4f-91ab-0f14fb1af0f8",
  "formType" : "ProgramEncounter",
  "formElementGroups" : [ {
    "uuid" : "eed9f95a-4f38-40a9-b770-90e0e3bbd8d5",
    "name" : "Treatment Phase",
    "displayOrder" : 1.0,
    "display" : "Treatment Phase ",
    "formElements" : [ {
      "name" : "Current Treatment Phase",
      "uuid" : "4e6671c3-1135-48bf-85e7-c8d9b9e7a8d5",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Current Treatment Phase",
        "uuid" : "6aa426c4-5628-419c-9391-5c7330744ba2"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "IP start date",
      "uuid" : "ddf44d05-2f74-4ee2-9973-02f22b519dc2",
      "keyValues" : [ ],
      "concept" : {
        "name" : "IP start date",
        "uuid" : "6ed1e9a4-7ae5-4da4-b421-aa671767dfed"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\nconst programEncounter = params.entity;\nconst formElement = params.formElement;\n\nconst statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n\nstatusBuilder.show().when.latestValueInPreviousEncounters('Current Treatment Phase').containsAnswerConceptName('Intensive Phase');\n\n  return statusBuilder.build();\n};",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "CP start date",
      "uuid" : "8d57e02b-c674-49de-a49a-8362489fa131",
      "keyValues" : [ ],
      "concept" : {
        "name" : "CP start date",
        "uuid" : "576b24ff-bc48-4114-8c75-e3eb6dfaaeee"
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\nconst programEncounter = params.entity;\nconst formElement = params.formElement;\n\nconst statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\nstatusBuilder.show();\n//statusBuilder.show().when.latestValueInPreviousEncounters('Current Treatment //Phase').containsAnswerConceptName('Continue Phase');\n\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Drug Resistant Regiment Start date",
      "uuid" : "3eacb60b-b6ea-4aa2-9c96-b0fdc520eacf",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Drug Resistant Regiment Start date",
        "uuid" : "85f54ca0-3619-4b28-b44a-20eabaaecec4"
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\nconst programEncounter = params.entity;\nconst formElement = params.formElement;\n\nconst statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n\nstatusBuilder.show().when.latestValueInPreviousEncounters('Current Treatment Phase').containsAnswerConceptName('Drug Resistant Regimen');\n\n  return statusBuilder.build();\n};",
      "mandatory" : true,
      "voided" : true
    } ]
  } ],
  "decisionRule" : "//SAMPLE RULE EXAMPLE\n  \"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const decisions = params.decisions;\n    //create complicationBuilder using programEncounter and then push to encounterDecisions array.\n    \n   const complicationsBuilder = new imports.rulesConfig.complicationsBuilder({\n        programEncounter: programEncounter,\n        complicationsConcept: \"Status\"\n    });\n    \n     complicationsBuilder.addComplication(\"Ongoing Treatment - CP\");\n         \n     decisions.encounterDecisions.push(complicationsBuilder.getComplications());\n    \n    \n    \n    return decisions;\n};",
  "visitScheduleRule" : "\"use strict\";\n({ params, imports }) => {\n  const programEncounter = params.entity;\n  const scheduleBuilder = new imports.rulesConfig.VisitScheduleBuilder({programEncounter});\n \n let nextPeriodicVisitDate = imports.moment(programEncounter.encounterDateTime).add(1, 'months').toDate(); \n   scheduleBuilder\n    .add({\n      name: \"CP monthly Check-in\",\n      encounterType: \"Periodic Check-ins\",\n      earliestDate: nextPeriodicVisitDate,\n      maxDate: imports.moment(nextPeriodicVisitDate).add(1, 'days').toDate()\n    }); \n    \n  return scheduleBuilder.getAll();\n};",
  "validationRule" : "",
  "checklistsRule" : ""
}